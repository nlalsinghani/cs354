#include "trimesh.h"
#include <assert.h>
#include <float.h>
#include <string.h>
#include <algorithm>
#include <cmath>
#include "../ui/TraceUI.h"
extern TraceUI* traceUI;

using namespace std;

Trimesh::~Trimesh()
{
	for (auto m : materials)
		delete m;
	for (auto f : faces)
		delete f;
}

// must add vertices, normals, and materials IN ORDER
void Trimesh::addVertex(const glm::dvec3& v)
{
	vertices.emplace_back(v);
}

void Trimesh::addMaterial(Material* m)
{
	materials.emplace_back(m);
}

void Trimesh::addNormal(const glm::dvec3& n)
{
	normals.emplace_back(n);
}
bool Trimesh::isTrimesh(){
	return true;
}
std::vector<TrimeshFace *>::iterator Trimesh::beginFace(){
	return faces.begin();
}
std::vector<TrimeshFace *>::iterator Trimesh::endFace(){
	return faces.end();
}
// Returns false if the vertices a,b,c don't all exist
bool Trimesh::addFace(int a, int b, int c)
{
	int vcnt = vertices.size();

	if (a >= vcnt || b >= vcnt || c >= vcnt)
		return false;

	TrimeshFace* newFace = new TrimeshFace(
	        scene, new Material(*this->material), this, a, b, c);
	newFace->setTransform(this->transform);
	if (!newFace->degen)
		faces.push_back(newFace);
	else
		delete newFace;

	// Don't add faces to the scene's object list so we can cull by bounding
	// box
	return true;
}

// Check to make sure that if we have per-vertex materials or normals
// they are the right number.
const char* Trimesh::doubleCheck()
{
	if (!materials.empty() && materials.size() != vertices.size())
		return "Bad Trimesh: Wrong number of materials.";
	if (!normals.empty() && normals.size() != vertices.size())
		return "Bad Trimesh: Wrong number of normals.";

	return 0;
}

bool Trimesh::intersectLocal(ray& r, isect& i) const
{
	bool have_one = false;
	for (auto face : faces) {
		isect cur;
		if (face->intersectLocal(r, cur)) {
			if (!have_one || (cur.getT() < i.getT())) {
				i = cur;
				have_one = true;
			}
		}
	}
	if (!have_one)
		i.setT(1000.0);
	return have_one;
}

bool TrimeshFace::intersect(ray& r, isect& i) const
{
	return intersectLocal(r, i);
}

// Intersect ray r with the triangle abc.  If it hits returns true,
// and put the parameter in t and the barycentric coordinates of the
// intersection in u (alpha) and v (beta).
bool TrimeshFace::intersectLocal(ray& r, isect& i) const
{
	// YOUR CODE HERE
	//
	// FIXME: Add ray-trimesh intersection
	const glm::dvec3 a = parent->vertices[ids[0]];
	const glm::dvec3 b = parent->vertices[ids[1]];
	const glm::dvec3 c = parent->vertices[ids[2]];
	if(abs(triangleArea) < RAY_EPSILON){
		return false;
	}
	double cosr = glm::dot(normal, r.getDirection());
	if(abs(cosr) < RAY_EPSILON){
		return false;
	}
	double t = glm::dot(normal, (a - r.getPosition())) / cosr;
	if(t < RAY_EPSILON){
		return false;
	}
	glm::dvec3 w = ((r.getPosition() + r.getDirection() * t) - a);
	double wv = glm::dot(w,v);
	double wu = glm::dot(w,u);
	double beta = ((uv * wv) - (vv * wu)) / triangleArea;
	double gamma = ((uv * wu) - (uu * wv)) / triangleArea;
	double alpha = 1.0 - (beta + gamma);

	if(alpha < 0.0 || beta < 0.0 || gamma < 0.0){
		return false;
	}
	i.setT(t);
	i.setBary(alpha, beta, gamma);
	glm::dvec2 coords = glm::dvec2(beta, gamma);
	i.setUVCoordinates(coords);
	i.setObject(this);
	if(parent->vertNorms){
		const glm::dvec3 normala = parent->normals[ids[0]];
		const glm::dvec3 normalb = parent->normals[ids[1]];
		const glm::dvec3 normalc = parent->normals[ids[2]];
		i.setN((alpha * normala) + (beta * normalb) + (gamma * normalc));
		glm::normalize(i.getN());
	}
	else{
		i.setN(normal);
		glm::normalize(i.getN());
	}
	if(!parent->materials.empty()){
		Material materiala(*parent->materials[ids[0]]);
		Material materialb(*parent->materials[ids[1]]);
		Material materialc(*parent->materials[ids[2]]);
		Material m;
		m += (alpha * materiala);
		m += (beta * materialb);
		m += (gamma * materialc);
		i.setMaterial(m);
	}
	else{
		i.setMaterial(this->getMaterial());
	}
	return true;



}

// Once all the verts and faces are loaded, per vertex normals can be
// generated by averaging the normals of the neighboring faces.
void Trimesh::generateNormals()
{
	int cnt = vertices.size();
	normals.resize(cnt);
	std::vector<int> numFaces(cnt, 0);

	for (auto face : faces) {
		glm::dvec3 faceNormal = face->getNormal();

		for (int i = 0; i < 3; ++i) {
			normals[(*face)[i]] += faceNormal;
			++numFaces[(*face)[i]];
		}
	}

	for (int i = 0; i < cnt; ++i) {
		if (numFaces[i])
			normals[i] /= numFaces[i];
	}

	vertNorms = true;
}

